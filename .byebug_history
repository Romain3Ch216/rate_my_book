exit
are_read[0...-1].reverse
continue
r
are_read
continue
are_read
continue
@book.chapters.reverse
@book.chapters
continue
user.reads.where(chapter: Chapter.find(190))
user = User.find_by_last_name('Thoreau')
user.reads.where(chapter: Chapter.find(190))
continue
user.reads.where(chapter: Chapter.find(190))
user.reads
book.chapters.reverse.find{ |chapter| chapter.reads.where(user: user).first.is_read == false }
user.reads.where(chapter: book.chapters.first).first.is_read == true
user.scrolls.where(chapter: book.chapters.last).empty?
user = User.find_by_last_name('Thoreau')
User.find_by_last_name('Thoreau')
User.last
book.chapters
continue
book.chapters
book
chapters
@book
continue
Chapter.find(118).reads.where(user: User.find(135))
User.all
Users
User.find_by_first_name(Romain)
Chapter.find(118).reads.where(user: User.find_by_first_name(Romain))
Chapter.find(118).reads
@book.chapters
@book = Book.find(142)
continue
@book.chapters.first.reads.where(user: current_user).first.is_read == true || !@book.chapters.first.scrolls.where(user: current_user).empty?
@book = Book.find(142)
Book.find(142).chapters.first.reads.where(user: current_user).first.is_read == true || !@book.chapters.first.scrolls.where(user: current_user).empty?
@book.chapters.first.scrolls.where(user: current_user).empty?
continue
@chapter
@review
<<<<<<< HEAD
exit
!!!
=======
continue
params
continue
[nil, false].include?(Chapter.find(38).reads.where(user: current_user).first)
[nil, false].include?(Chapter.find(37).reads.where(user: current_user).first)
[nil, false].include?(Chapter.find(38).reads.where(user: current_user).first)
[nil, false].include?(Chapter.find(38).reads.where(user: current_user).first
@book.chapters.find_by_chapter_id(38)
@book.chapters
Chapter.find(38).reads
@book.chapters.find { |chapter| [nil, false].include?(chapter.reads.where(user: current_user).first)}
continue
@book.chapters.find { |chapter| [nil, false].include?(chapter.reads.where(user: current_user).first)}
continue
@book.chapters.find { |chapter| [nil, false].include?(chapter.reads.where(user: current_user).first)}
@book
continue
Chapter.find(37)
@book.chapters.find { |chapter| [nil, false].include?(chapter.reads.where(user: current_user).first)}
continue
@book.chapters.find { |chapter| [nil, false].include?(chapter.reads.where(user: current_user).first)}
continue
@book.chapters.find { |chapter| chapter.reads.where(user: current_user).first.is_read == false}.nil?
@book.chapters.find { |chapter| chapter.reads.where(user: current_user).first.is_read == false}
@book.chapters.find_by { |chapter| chapter.reads.where(user: current_user).first.is_read == false}.nil?
@book.chapters.find_by { |chapter| chapter.reads.where(user: current_user).first.is_read == false}
c
Upvote.find(params[:id])
>>>>>>> master
